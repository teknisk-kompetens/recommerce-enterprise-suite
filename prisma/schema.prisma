
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/recommerce-enterprise/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core re:Commerce Enterprise Models
enum UserLevel {
  MASTER
  SUPER
  RESELLER
  AFFILIATE
  COMPANY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

enum ModuleCategory {
  CRM
  ANALYTICS
  ECOMMERCE
  MARKETING
  FINANCE
  INTEGRATIONS
  AI_TOOLS
  CUSTOM
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?
  name          String?
  image         String?
  level         UserLevel   @default(COMPANY)
  status        UserStatus  @default(ACTIVE)
  parentId      String?
  parent        User?       @relation("UserHierarchy", fields: [parentId], references: [id])
  children      User[]      @relation("UserHierarchy")
  
  // Company/Organization details
  companyName   String?
  website       String?
  phone         String?
  address       String?
  country       String?
  timezone      String?
  
  // Billing details
  stripeCustomerId String?
  
  // Timestamps
  emailVerified DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  roles         UserRole[]
  subscriptions Subscription[]
  apiKeys       ApiKey[]
  branding      CompanyBranding?
  activities    UserActivity[]
  notifications Notification[]
  usageTracking UsageTracking[]
  moduleAssignments ModuleAssignment[]
  
  // Commission tracking for resellers
  commissions   Commission[]  @relation("CommissionEarner")
  generatedCommissions Commission[] @relation("CommissionGenerator")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  level       UserLevel
  permissions Permission[]
  userRoles   UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  resource    String // e.g., "users", "modules", "billing"
  action      String // e.g., "create", "read", "update", "delete"
  roles       Role[]
  createdAt   DateTime @default(now())
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  assignedBy String?
  
  @@unique([userId, roleId])
}

model Module {
  id            String         @id @default(cuid())
  name          String         @unique
  displayName   String
  description   String
  category      ModuleCategory
  version       String         @default("1.0.0")
  price         Float          @default(0)
  isActive      Boolean        @default(true)
  features      Json? // JSON array of features
  dependencies  String[] // Array of module IDs this depends on
  
  // Module metadata
  iconUrl       String?
  coverImageUrl String?
  documentationUrl String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  assignments   ModuleAssignment[]
  subscriptionItems SubscriptionItem[]
  usageTracking UsageTracking[]
}

model ModuleAssignment {
  id        String   @id @default(cuid())
  userId    String
  moduleId  String
  isActive  Boolean  @default(true)
  settings  Json? // Module-specific settings
  
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  status          SubscriptionStatus @default(TRIALING)
  stripeSubscriptionId String?       @unique
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialEnd        DateTime?
  cancelAtPeriodEnd Boolean         @default(false)
  
  // Billing
  totalAmount     Float              @default(0)
  currency        String             @default("USD")
  billingCycle    String             @default("monthly") // monthly, yearly
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           SubscriptionItem[]
  invoices        Invoice[]
}

model SubscriptionItem {
  id             String       @id @default(cuid())
  subscriptionId String
  moduleId       String
  quantity       Int          @default(1)
  unitPrice      Float
  totalPrice     Float
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  module         Module       @relation(fields: [moduleId], references: [id])
  
  @@unique([subscriptionId, moduleId])
}

model Invoice {
  id               String    @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String?   @unique
  amount           Float
  currency         String    @default("USD")
  status           String    @default("draft") // draft, open, paid, void, uncollectible
  description      String?
  
  createdAt        DateTime  @default(now())
  dueDate          DateTime?
  paidAt           DateTime?
  
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json? // API permissions
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime?
  usageCount  Int      @default(0)
  rateLimit   Int      @default(1000) // requests per hour
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests    ApiRequest[]
}

model ApiRequest {
  id        String   @id @default(cuid())
  apiKeyId  String
  endpoint  String
  method    String
  status    Int
  response  Json?
  timestamp DateTime @default(now())
  
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
}

model CompanyBranding {
  id            String @id @default(cuid())
  userId        String @unique
  
  // Brand colors
  primaryColor   String? @default("#3B82F6")
  secondaryColor String? @default("#1E40AF")
  accentColor    String? @default("#F59E0B")
  backgroundColor String? @default("#FFFFFF")
  textColor      String? @default("#1F2937")
  
  // Brand assets
  logoUrl        String?
  faviconUrl     String?
  brandName      String?
  tagline        String?
  
  // Custom CSS
  customCss      String? @db.Text
  
  // Domain settings
  customDomain   String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String   // e.g., "login", "module_accessed", "api_call"
  resource    String?  // What was acted upon
  metadata    Json?    // Additional data
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String   @db.Text
  type        String   @default("info") // info, success, warning, error
  isRead      Boolean  @default(false)
  actionUrl   String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  readAt      DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageTracking {
  id         String   @id @default(cuid())
  userId     String
  moduleId   String?
  metric     String   // e.g., "api_calls", "storage_used", "users_created"
  value      Float
  unit       String?  // e.g., "calls", "MB", "count"
  timestamp  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  module     Module?  @relation(fields: [moduleId], references: [id])
}

model Commission {
  id          String   @id @default(cuid())
  earnerId    String   // User who earns the commission
  generatorId String   // User who generated the sale
  amount      Float
  percentage  Float
  description String?
  status      String   @default("pending") // pending, paid, canceled
  
  createdAt   DateTime @default(now())
  paidAt      DateTime?
  
  earner      User     @relation("CommissionEarner", fields: [earnerId], references: [id])
  generator   User     @relation("CommissionGenerator", fields: [generatorId], references: [id])
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  oldValue  Json?
  newValue  Json?
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
}
